tools:
  - name: schedule_task
    description: Schedule a task with Kubiya API
    type: python
    alias: schedule
    content: |
      import os
      import sys
      import requests
      from datetime import datetime, timedelta
      from pytimeparse.timeparse import timeparse

      def parse_duration(duration):
          seconds = timeparse(duration)
          if seconds is None:
              print("Error: Invalid duration format. Please use a valid format (e.g., 5h for 5 hours, 30m for 30 minutes).")
              sys.exit(1)
          return timedelta(seconds=seconds)

      def calculate_schedule_time(duration):
          now = datetime.utcnow()
          return now + parse_duration(duration)

      def main(schedule_time):
          required_vars = [
              "KUBIYA_API_KEY", "USER_ID", "SLACK_CHANNEL_ID", 
              "TEAM_ID", "USER_EMAIL", "ORGANIZATION", "AGENT"
          ]
          for var in required_vars:
              if var not in os.environ:
                  print(f"Error: {var} is not set. Please set the {var} environment variable.")
                  sys.exit(1)

          payload = {
              "schedule_time": schedule_time,
              "user_id": os.environ["USER_ID"],
              "channel_id": os.environ["SLACK_CHANNEL_ID"],
              "team_id": os.environ["TEAM_ID"],
              "user_email": os.environ["USER_EMAIL"],
              "organization_name": os.environ["ORGANIZATION"],
              "task_description": "say hello",
              "selected_agent": os.environ["AGENT"]
          }
          response = requests.post(
              'https://api.kubiya.ai/api/v1/scheduled_tasks',
              headers={
                  'Authorization': f'UserKey {os.environ["KUBIYA_API_KEY"]}',
                  'Content-Type': 'application/json'
              },
              json=payload
          )
          if response.status_code < 300:
              print(f"Task scheduled successfully. Response: {response.text}")
          else:
              print(f"Error: {response.status_code} - {response.text}")

      if __name__ == "__main__":
          duration = "{{ .execution_delay }}"
          schedule_time = calculate_schedule_time(duration)
          print(f"Scheduling task for {schedule_time}")
          main(schedule_time.strftime("%Y-%m-%dT%H:%M:%SZ"))
    args:
      execution_delay:
        description: 'The delay before the task is executed (e.g., 5h for 5 hours, 30m for 30 minutes)'
        required: true
    dependencies: |
      requests==2.25.1
      pytimeparse==1.1.8
    env:
      - "KUBIYA_API_KEY" # Fetched from Kubiya secret
      - "USER_ID" # Fetched from Kubiya secret
      - "SLACK_CHANNEL_ID" # Fetched from Kubiya secret
      - "TEAM_ID" # Fetched from Kubiya secret
      - "USER_EMAIL" # Fetched from Kubiya secret
      - "ORGANIZATION" # Fetched from Kubiya secret
      - "AGENT" # Fetched from Kubiya secret
