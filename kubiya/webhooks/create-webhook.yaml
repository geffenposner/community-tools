tools:
  - name: create_webhook
    description: Create a webhook event with Kubiya API
    type: python
    alias: create_webhook
    content: |
      import os
      import sys
      import requests
      from datetime import datetime
      import uuid

      def main(name, ai_instructions, source):
          required_vars = [
              "KUBIYA_API_KEY", "KUBIYA_USER_EMAIL", "KUBIYA_USER_ORG", "KUBIYA_AGENT_UUID", "SLACK_CHANNEL"
          ]
          for var in required_vars:
              if var not in os.environ:
                  print(f"Error: {var} is not set. Please set the {var} environment variable.")
                  sys.exit(1)

          USER_EMAIL = os.getenv('KUBIYA_USER_EMAIL')
          KUBIYA_USER_ORG = os.getenv('KUBIYA_USER_ORG')
          SLACK_CHANNEL = os.getenv('SLACK_CHANNEL')

          # Unique request ID
          request_id = str(uuid.uuid4())

          payload = {
              "agent_id": os.getenv('KUBIYA_AGENT_UUID'),
              "communication": {
                  "destination": SLACK_CHANNEL,
                  "method": "Slack"
              },
              "created_at": datetime.utcnow().isoformat() + "Z",
              "created_by": USER_EMAIL,
              "name": name,
              "org": KUBIYA_USER_ORG,
              "prompt": ai_instructions,
              "source": source,
              "updated_at": datetime.utcnow().isoformat() + "Z"
          }

          response = requests.post(
              "https://api.kubiya.ai/api/v1/event",
              headers={
                  'Content-Type': 'application/json',
                  'Authorization': f'UserKey {os.environ["KUBIYA_API_KEY"]}'
              },
              json=payload
          )

          if response.status_code < 300:
              print(f"Webhook created successfully and has been sent to the Slack Channel.")
              event_response = response.json()
              webhook_url = event_response.get("webhook_url")
              if webhook_url:
                  webhook_response = requests.post(
                      webhook_url,
                      headers={'Content-Type': 'application/json'},
                      json=payload
                  )
                  if webhook_response.status_code < 300:
                      print("Webhook event sent successfully.")
                  else:
                      print(f"Error sending webhook event: {webhook_response.status_code} - {webhook_response.text}")
              else:
                  print("Error: No webhook URL returned in the response. Could not send webhook to Slack channel.")
          else:
              print(f"Error: {response.status_code} - {response.text}")

      if __name__ == "__main__":
          name = "{{ .name }}"
          ai_instructions = "{{ .ai_instructions }}"
          source = "{{ .source }}"
          main(name, ai_instructions, source)
    args:
      name:
        description: 'The name of the webhook event'
        required: true
      ai_instructions:
        description: 'The AI instructions for the webhook event'
        required: true
      source:
        description: 'The source of the webhook event'
        required: true
    dependencies: |
      requests==2.25.1
    env:
      - "KUBIYA_API_KEY" # Fetched from Kubiya secret
      - "KUBIYA_USER_EMAIL" # Fetched from Kubiya secret
      - "KUBIYA_USER_ORG" # Fetched from Kubiya secret
      - "KUBIYA_AGENT_UUID" # Fetched from Kubiya secret
      - "SLACK_CHANNEL" # Fetched from Kubiya secret
    metadata:
      category:
        - "Kubiya"
      tags: 
        - "Kubiya"
      image_url: "https://media.licdn.com/dms/image/D560BAQFaDnQXq7Dtbg/company-logo_200_200/0/1687904106468/kubiya_logo?e=2147483647&v=beta&t=7XFSmE0tW60OylcOGoSMW1oMDUqdH8p8gwCfXLGQnj4"
      documentation: "https://github.com/kubiyabot/community-tools/blob/main/kubiya/task-scheduler-tool/README.md"
